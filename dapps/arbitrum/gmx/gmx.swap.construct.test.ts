import { ChainID } from "../../../registry/chains";
import { construct } from "../../../sdk/construct";
import {ethers, BigNumber} from "ethers";
import { DestinationChainAction} from "../../../sdk/interfaces";
import { Dapp } from "../../../registry/dapps";
import { expect } from 'chai';
import { GMXSwapArgs } from "./gmx";
import { Env } from "../../../registry/providers";
//  npx mocha -r ts-node/register sdk/test.ts --timeout 20000

const gmxargs : GMXSwapArgs = {
    tokenSymbolOut: "FRAX",
    toAddress: "0x3D71c08d432710123eaf8fC7278431518366A335",
}

const destinationChainAction : DestinationChainAction = {
    dappNameId: "gmx",
    functionSelector: "swap",
    args: JSON.stringify(gmxargs)
}

describe("construct gmx", () => {
    it.only("gmx usdc(eth) - > axlusdc(arb) -> usdc(arb) -> frax(arb)", async () => {
        const routeReturn = await construct(ChainID.Ethereum, "USDC", ethers.utils.parseUnits("5", 6), destinationChainAction, ChainID.Arbitrum, "0x3D71c08d432710123eaf8fC7278431518366A335", Env.FORK)
        expect([{
            target: '0x0000000000000000000000000000000000000000',
            payload: '0x',
            tokenIn: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'
        }]).to.eql(routeReturn.routes);
        expect(5000000).to.equal(routeReturn.tokenInputAmount.toNumber());
        expect(false).to.equal(routeReturn.nativeEth);
        expect({
            destinationChain: 'arbitrum',
            destinationAddress: '0xa48D75f0Ac78f3b9a4d142d176985be5031614Ba',
            tokenSymbol: 'USDC',
            tokenAmount: BigNumber.from(5000000),
            payload: '0x0000000000000000000000003d71c08d432710123eaf8fc7278431518366a335000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000000200000000000000000000000015a1c069fcf6f79a3d5bb5d4a8ba004fbf4fabac000000000000000000000000abbc5f99639c9b6bcb58544ddf04efa6802f406400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000843df021240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e46023e9660000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000044aa2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d71c08d432710123eaf8fc7278431518366a3350000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000017fc002b466eec40dae837fc4be5c67993ddbd6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000eb466342c4d449bc9f53a865d5cb90586f405215000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8'
          }).to.eql(routeReturn.bridgeInfo);
    });
    it.only("gmx eth(eth) - > usdc(eth) -> axlusdc(arb) -> usdc(arb) -> frax(arb)",async () => {
        const routeReturn = await construct(ChainID.Ethereum, "ETH", ethers.utils.parseUnits("0.01"), destinationChainAction, ChainID.Arbitrum, "0x3D71c08d432710123eaf8fC7278431518366A335", Env.FORK)
        // expect([{
        //     target: '0xE592427A0AEce92De3Edee1F18E0157C05861564',
        //     payload: '0x414bf389000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000a15dffea81f2caa4e5b61889baadfc524488462f0000000000000000000000000000000000000000000000000000000063e0771c000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000f822db0000000000000000000000000000000000000000000000000000000000000000',
        //     tokenIn: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'
        // }]).to.eql(routes);
        // This test could fail due to the pool changes
        // expect(16260840).to.equal(amount.toNumber());
        expect(true).to.equal(routeReturn.nativeEth);
        // expect({
        //     destinationChain: 'arbitrum',
        //     destinationAddress: '0xa48D75f0Ac78f3b9a4d142d176985be5031614Ba',
        //     tokenSymbol: 'USDC',
        //     tokenAmount: BigNumber.from(5000000),
        //     payload: '0x0000000000000000000000003d71c08d432710123eaf8fc7278431518366a335000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000000200000000000000000000000015a1c069fcf6f79a3d5bb5d4a8ba004fbf4fabac000000000000000000000000abbc5f99639c9b6bcb58544ddf04efa6802f406400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000843df02124000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000f8535a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e46023e96600000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000df7e3700000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d71c08d432710123eaf8fc7278431518366a3350000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000017fc002b466eec40dae837fc4be5c67993ddbd6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000eb466342c4d449bc9f53a865d5cb90586f405215000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8'
        //   }).to.eql(bridgeinfo);
          

    });
    
})


