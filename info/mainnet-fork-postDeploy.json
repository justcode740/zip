[
  {
    "name": "Ethereum",
    "chainId": 1,
    "gateway": "0x4F4495243837681061C4743b74B3eEdf548D56A5",
    "gasReceiver": "0x4154CF6eea0633DD9c4933E76a077fD7E9260738",
    "constAddressDeployer": "0x617179a15fEAa53Fa82ae80b0fc3E85b7359a748",
    "tokens": {
      "uusdc": "USDC"
    },
    "rpc": "http://localhost:8500/0",
    "tokenName": "Ether",
    "tokenSymbol": "ETH",
    "wallet": {
      "_isSigner": true,
      "address": "0x3D71c08d432710123eaf8fC7278431518366A335",
      "provider": {
        "_isProvider": true,
        "_events": [],
        "_emitted": {
          "block": -2
        },
        "disableCcipRead": false,
        "formatter": {
          "formats": {
            "transaction": {},
            "transactionRequest": {},
            "receiptLog": {},
            "receipt": {},
            "block": {},
            "blockWithTransactions": {},
            "filter": {},
            "filterLog": {}
          }
        },
        "anyNetwork": false,
        "_networkPromise": {},
        "_maxInternalBlockNumber": -1024,
        "_lastBlockNumber": -2,
        "_maxFilterBlockRange": 10,
        "_pollingInterval": 4000,
        "_fastQueryDate": 0,
        "connection": {
          "url": "http://localhost:8500/0"
        },
        "_nextId": 45,
        "_eventLoopCache": {
          "detectNetwork": null,
          "eth_chainId": null
        },
        "_network": {
          "name": "homestead",
          "chainId": 1,
          "ensAddress": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        }
      }
    },
    "contract": {
      "abi": [
        "constructor(address gateway_, address gasReceiver_, string _chainName)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "event WhitelistDapps(address[] list)",
        "event WhitelistExchanges(address[] list)",
        "function addWhitelistDapps(address[] list)",
        "function addWhitelistExchanges(address[] list)",
        "function admin() view returns (address)",
        "function chainName() view returns (string)",
        "function exchange(tuple(address target, bytes payload, address tokenIn)[] _routes) payable",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasReceiver() view returns (address)",
        "function gateway() view returns (address)",
        "function isWhitelistDapp(address addr) view returns (bool)",
        "function isWhitelistExchange(address addr) view returns (bool)",
        "function zipexecute(tuple(address target, bytes payload, address tokenIn)[] routes, uint256 tokenInputAmount, bool nativeEth, tuple(string destinationChain, string destinationAddress, string tokenSymbol, uint256 tokenAmount, bytes payload) bridgeInfo) payable"
      ],
      "address": "0x547bE9BCB14c3198B210eE5ac43F028614Cf9f89"
    },
    "usdc": {
      "abi": [
        "error InvalidAccount()",
        "event Approval(address indexed owner, address indexed spender, uint256 value)",
        "event Transfer(address indexed from, address indexed to, uint256 value)",
        "function allowance(address owner, address spender) view returns (uint256)",
        "function approve(address spender, uint256 amount) returns (bool)",
        "function balanceOf(address account) view returns (uint256)",
        "function totalSupply() view returns (uint256)",
        "function transfer(address recipient, uint256 amount) returns (bool)",
        "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
      ],
      "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    }
  },
  {
    "name": "arbitrum",
    "chainId": 42161,
    "gateway": "0xe432150cce91c13a887f7D836923d5597adD8E31",
    "gasReceiver": "0x2d5d7d31F671F86C782533cc367F14109a082712",
    "constAddressDeployer": "0x617179a15fEAa53Fa82ae80b0fc3E85b7359a748",
    "tokens": {
      "uusdc": "axlUSDC"
    },
    "rpc": "http://localhost:8500/1",
    "tokenName": "Ether",
    "tokenSymbol": "ETH",
    "wallet": {
      "_isSigner": true,
      "address": "0x3D71c08d432710123eaf8fC7278431518366A335",
      "provider": {
        "_isProvider": true,
        "_events": [],
        "_emitted": {
          "block": -2
        },
        "disableCcipRead": false,
        "formatter": {
          "formats": {
            "transaction": {},
            "transactionRequest": {},
            "receiptLog": {},
            "receipt": {},
            "block": {},
            "blockWithTransactions": {},
            "filter": {},
            "filterLog": {}
          }
        },
        "anyNetwork": false,
        "_networkPromise": {},
        "_maxInternalBlockNumber": -1024,
        "_lastBlockNumber": -2,
        "_maxFilterBlockRange": 10,
        "_pollingInterval": 4000,
        "_fastQueryDate": 0,
        "connection": {
          "url": "http://localhost:8500/1"
        },
        "_nextId": 45,
        "_eventLoopCache": {
          "detectNetwork": null,
          "eth_chainId": null
        },
        "_network": {
          "name": "arbitrum",
          "chainId": 42161,
          "ensAddress": null,
          "_defaultProvider": null
        }
      }
    },
    "contract": {
      "abi": [
        "constructor(address gateway_, address gasReceiver_, string _chainName)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "event WhitelistDapps(address[] list)",
        "event WhitelistExchanges(address[] list)",
        "function addWhitelistDapps(address[] list)",
        "function addWhitelistExchanges(address[] list)",
        "function admin() view returns (address)",
        "function chainName() view returns (string)",
        "function exchange(tuple(address target, bytes payload, address tokenIn)[] _routes) payable",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasReceiver() view returns (address)",
        "function gateway() view returns (address)",
        "function isWhitelistDapp(address addr) view returns (bool)",
        "function isWhitelistExchange(address addr) view returns (bool)",
        "function zipexecute(tuple(address target, bytes payload, address tokenIn)[] routes, uint256 tokenInputAmount, bool nativeEth, tuple(string destinationChain, string destinationAddress, string tokenSymbol, uint256 tokenAmount, bytes payload) bridgeInfo) payable"
      ],
      "address": "0xb2009dd247D9A43a4bdA34C7103cc4Cd0b4CF61d"
    },
    "usdc": {
      "abi": [
        "error InvalidAccount()",
        "event Approval(address indexed owner, address indexed spender, uint256 value)",
        "event Transfer(address indexed from, address indexed to, uint256 value)",
        "function allowance(address owner, address spender) view returns (uint256)",
        "function approve(address spender, uint256 amount) returns (bool)",
        "function balanceOf(address account) view returns (uint256)",
        "function totalSupply() view returns (uint256)",
        "function transfer(address recipient, uint256 amount) returns (bool)",
        "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
      ],
      "address": "0xEB466342C4d449BC9f53A865D5Cb90586f405215"
    }
  }
]
